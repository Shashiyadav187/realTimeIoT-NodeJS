'use strict';var cov_2075oxtfp=function(){var path='/home/m/Desktop/platzi/courses/node/avance/realTimeNodeJS/realTimeNodeJS-db/lib/metric.js',hash='7ea404a70ad461e425383c2406caa8856cb5c6f8',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/m/Desktop/platzi/courses/node/avance/realTimeNodeJS/realTimeNodeJS-db/lib/metric.js',statementMap:{'0':{start:{line:3,column:0},end:{line:34,column:1}},'1':{start:{line:5,column:4},end:{line:16,column:6}},'2':{start:{line:19,column:18},end:{line:21,column:6}},'3':{start:{line:23,column:4},end:{line:27,column:5}},'4':{start:{line:24,column:6},end:{line:24,column:50}},'5':{start:{line:25,column:21},end:{line:25,column:53}},'6':{start:{line:26,column:6},end:{line:26,column:28}},'7':{start:{line:30,column:2},end:{line:33,column:3}}},fnMap:{'0':{name:'setupMetric',decl:{start:{line:3,column:26},end:{line:3,column:37}},loc:{start:{line:3,column:64},end:{line:34,column:1}},line:3},'1':{name:'findByAgentUuid',decl:{start:{line:4,column:17},end:{line:4,column:32}},loc:{start:{line:4,column:40},end:{line:17,column:3}},line:4},'2':{name:'create',decl:{start:{line:18,column:17},end:{line:18,column:23}},loc:{start:{line:18,column:39},end:{line:28,column:3}},line:18}},branchMap:{'0':{loc:{start:{line:23,column:4},end:{line:27,column:5}},type:'if',locations:[{start:{line:23,column:4},end:{line:27,column:5}},{start:{line:23,column:4},end:{line:27,column:5}}],line:23}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0},f:{'0':0,'1':0,'2':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2075oxtfp.s[0]++;module.exports=function setupMetric(MetricModel,AgentModel){cov_2075oxtfp.f[0]++;async function findByAgentUuid(uuid){cov_2075oxtfp.f[1]++;cov_2075oxtfp.s[1]++;return MetricModel.findAll({atributes:['type'],group:['type'],include:[{atributes:[],model:AgentModel,where:{uuid}}],raw:true});}async function create(uuid,metric){cov_2075oxtfp.f[2]++;const agent=(cov_2075oxtfp.s[2]++,await AgentModel.findOne({where:{uuid}}));cov_2075oxtfp.s[3]++;if(agent){cov_2075oxtfp.b[0][0]++;cov_2075oxtfp.s[4]++;Object.assign(metric,{agentId:agent.id});const result=(cov_2075oxtfp.s[5]++,await MetricModel.create(metric));cov_2075oxtfp.s[6]++;return result.toJSON();}else{cov_2075oxtfp.b[0][1]++;}}cov_2075oxtfp.s[7]++;return{create,findByAgentUuid};};