{"version":3,"sources":["metric-tests.js"],"names":["test","require","sinon","proxyquire","metricFixtures","config","loggin","MetricStub","belongsTo","spy","AgentStub","hasMany","sandbox","db","agentId","type","beforeEach","create","setupDatabse","serial","t","true","called","calledWith","metric","Metric","findByTypeAgentUuid","deepEqual","byTypeAnAgentId"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA;AACA,MAAMG,iBAAiBH,QAAQ,mBAAR,CAAvB;;AAGA,IAAII,SAAS;AACTC,UAAQ,YAAY,CAAE;AADb,CAAb;;AAIE,IAAIC,aAAa;AACfC,aAAWN,MAAMO,GAAN;AADI,CAAjB;;AAIA,IAAIC,YAAY;AACdC,WAAST,MAAMO,GAAN;AADK,CAAhB;;AAIA,IAAIG,UAAU,IAAd;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,CAAd;AACA,IAAIC,OAAO,OAAX;AACAf,KAAKgB,UAAL,CAAgB,YAAY;AAC1BJ,YAAUV,MAAMU,OAAN,CAAcK,MAAd,EAAV;AACAP,cAAY;AACVC,aAASC,QAAQH,GAAR;AADC,GAAZ;AAGA,QAAMS,eAAef,WAAW,KAAX,EAAkB;AACnC,sBAAkB,MAAMO,SADW;AAEnC,uBAAmB,MAAMH;AAFU,GAAlB,CAArB;AAIEM,OAAK,MAAMK,aAAab,MAAb,CAAX;AACD,CAVH;;AAaAL,KAAKmB,MAAL,CAAY,OAAZ,EAAqBC,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEC,IAAF,uBAAO,8DAAUV,OAAV,wBAAkBW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,4BAAjC;AACAF,IAAEC,IAAF,yBAAO,uEAAUV,OAAV,+BAAkBY,UAAlB,aAA6BhB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,wCAAjD;AACAa,IAAEC,IAAF,yBAAO,iEAAWb,SAAX,wBAAqBc,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,+BAApC;AACAF,IAAEC,IAAF,yBAAO,wEAAWb,SAAX,+BAAqBe,UAArB,aAAgCb,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,kCAAnD;AACD,CALD;;AAQAV,KAAKmB,MAAL,CAAY,sBAAZ,EAAoC,MAAMC,CAAN,IAAW;AAAA;;AAC7C,MAAII,SAAS,MAAMX,GAAGY,MAAH,CAAUC,mBAAV,CAA8BX,IAA9B,EAAoCD,OAApC,CAAnB;AACAM,IAAEC,IAAF,yBAAO,iEAAWK,mBAAX,wBAA+BJ,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA8C,+CAA9C;AACF;AACA;;AAEEF,IAAEO,SAAF,CAAYH,MAAZ,EAAoBpB,eAAewB,eAAf,CAA+Bb,IAA/B,EAAqCD,OAArC,CAApB,EAAmE,oBAAnE;AACD,CAPD","file":"metric-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\n//const agentFixtures = require('./fixtures/agent')\nconst metricFixtures = require('./fixtures/metric')\n\n\nlet config = {\n    loggin: function () {}\n  }\n  \n  let MetricStub = {\n    belongsTo: sinon.spy()\n  }\n\n  let AgentStub = {\n    hasMany: sinon.spy()\n  }\n\n  let sandbox = null\n  let db = null\n  let agentId = 1\n  let type = 'START'\n  test.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n      hasMany: sandbox.spy()\n    }\n    const setupDatabse = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n      })\n      db = await setupDatabse(config)\n    })\n\n\n  test.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'Agent.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agent.hasMany was executed with Matric')\n    t.true(MetricStub.belongsTo.called, 'Metric.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n  })\n\n\n  test.serial('Metric#findByAgentId', async t => {\n    let metric = await db.Metric.findByTypeAgentUuid(type, agentId)\n    t.true(MetricStub.findByTypeAgentUuid.called, 'findByTypeAgentUuid should be called on model')\n  //  t.true(AgentStub.findById.calledOnce, 'FindById should be called once')\n  //  t.true(AgentStub.findById.calledWith(id), 'FindById should be called with specified id')\n  \n    t.deepEqual(metric, metricFixtures.byTypeAnAgentId(type, agentId), 'Should be the same')\n  })\n  "]}