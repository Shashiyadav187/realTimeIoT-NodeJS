{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","loggin","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","beforeEach","create","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","update","setupDatabse","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n    loggin: function() {}\n}\n\nlet MetricStub = {\n belongsTo: sinon.spy()\n}\n\n// Get one instance \nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet uuid = 'yyyy-yyyy-yyyy'\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\nlet uuidArgs = {\n    where: {\n        uuid\n    }\n}\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n    // Model findOne Stub\n    AgentStub.findOne = sandbox.stub()\n    AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n    // Model findById Stub\n    AgentStub.findById = sandbox.stub()\n    AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n    AgentStub.update = sandbox.stub()\n    AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n    const setupDatabse = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n    })\n    db = await setupDatabse(config)\n})\n\ntest.afterEach(() => {\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n\n\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'Agent.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agent.hasMany was executed with Matric')\n    t.true(MetricStub.belongsTo.called, 'Metric.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n})\n\ntest.serial('Agent#findById', async t => {\n   let agent = await db.Agent.findById(id) \n   t.true(AgentStub.findById.called, 'FindById should be called on model')\n   t.true(AgentStub.findById.calledOnce, 'FindById should be called once')\n   t.true(AgentStub.findById.calledWith(id), 'FindById should be called with specified id')\n\n   t.deepEqual(agent, agentFixtures.byId(id), 'Should be the same')\n})\n\n test.serial('Agent#createOrUpdate - exists', async t => {\n     let agent = await db.Agent.createOrUpdate(single)\n     t.true(AgentStub.findOne.called, 'FindOne should be called on model')\n     t.true(AgentStub.findOne.calledTwice, 'FindOne should be called twice')\n     t.deepEqual(agent, single, 'Agent should be the same')\n })\n\n"]}