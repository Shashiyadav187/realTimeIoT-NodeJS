{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","loggin","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","create","hasMany","findById","stub","withArgs","returns","Promise","resolve","byId","setupDatabse","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n    loggin: function() {}\n}\n\nlet MetricStub = {\n belongsTo: sinon.spy()\n}\n\n// Get one instance \nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n    // Model findById Stub\n    AgentStub.findById = sandbox.stub()\n    AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n    const setupDatabse = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n    })\n    db = await setupDatabse(config)\n})\n\ntest.afterEach(() => {\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n\n\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'Agent.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agent.hasMany was executed with Matric')\n    t.true(MetricStub.belongsTo.called, 'Metric.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n})\n\ntest.serial('Agent#findById', async t => {\n   let agent = await db.Agent.findById(id) \n   t.true(AgentStub.findById.called, 'FindById should be called on model')\n   t.true(AgentStub.findById.calledOnce, 'FindById should be called once')\n   t.true(AgentStub.findById.calledWith(id), 'FindById should be called with specified id')\n\n   t.deepEqual(agent, agentFixtures.byId(id), 'Should be the same')\n})"]}