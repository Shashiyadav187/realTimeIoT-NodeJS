{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","loggin","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","beforeEach","create","hasMany","update","stub","withArgs","returns","Promise","resolve","findById","byId","findOne","byUuid","setupDatabse","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACTC,YAAQ,YAAW,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AAChBC,eAAWN,MAAMO,GAAN;;AAGZ;AAJiB,CAAjB,CAKA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,OAAO,gBAAX;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEA,IAAIC,WAAW;AACXC,WAAO,EAAEL,IAAF;AADI,CAAf;;AAKAd,KAAKoB,UAAL,CAAgB,YAAY;AACxBH,cAAUf,MAAMe,OAAN,CAAcI,MAAd,EAAV;AACAN,gBAAY;AACRO,iBAASL,QAAQR,GAAR;AAEf;AAHc,KAAZ,CAIFM,UAAUQ,MAAV,GAAmBN,QAAQO,IAAR,EAAnB;AACAT,cAAUQ,MAAV,CAAiBE,QAAjB,CAA0Bf,MAA1B,EAAkCQ,QAAlC,EAA4CQ,OAA5C,CAAoDC,QAAQC,OAAR,CAAgBlB,MAAhB,CAApD;;AAEA;AACAK,cAAUc,QAAV,GAAqBZ,QAAQO,IAAR,EAArB;AACAT,cAAUc,QAAV,CAAmBJ,QAAnB,CAA4BZ,EAA5B,EAAgCa,OAAhC,CAAwCC,QAAQC,OAAR,CAAgBxB,cAAc0B,IAAd,CAAmBjB,EAAnB,CAAhB,CAAxC;;AAEA;AACAE,cAAUgB,OAAV,GAAoBd,QAAQO,IAAR,EAApB;AACAT,cAAUgB,OAAV,CAAkBN,QAAlB,CAA2BP,QAA3B,EAAqCQ,OAArC,CAA6CC,QAAQC,OAAR,CAAgBxB,cAAc4B,MAAd,CAAqBlB,IAArB,CAAhB,CAA7C;;AAIE,UAAMmB,eAAe9B,WAAW,KAAX,EAAkB;AACnC,0BAAkB,MAAMY,SADW;AAEnC,2BAAmB,MAAMR;AAFU,KAAlB,CAArB;AAIAS,SAAK,MAAMiB,aAAa5B,MAAb,CAAX;AACH,CAxBD;;AA0BAL,KAAKkC,SAAL,CAAe,MAAM;AACjBjB,eAAWf,MAAMe,OAAN,CAAckB,OAAd,EAAX;AACH,CAFD;;AAIAnC,KAAK,OAAL,EAAcoC,KAAK;AAAA;;AACfA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACH,CAFD;;AAKAtC,KAAKuC,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACtBA,MAAEI,IAAF,yBAAO,gEAAUlB,OAAV,wBAAkBmB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,4BAAjC;AACAL,MAAEI,IAAF,yBAAO,uEAAUlB,OAAV,+BAAkBoB,UAAlB,aAA6BnC,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiD,wCAAjD;AACA6B,MAAEI,IAAF,yBAAO,iEAAWhC,SAAX,wBAAqBiC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,+BAApC;AACAL,MAAEI,IAAF,yBAAO,wEAAWhC,SAAX,+BAAqBkC,UAArB,aAAgC3B,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmD,kCAAnD;AACH,CALD;;AAOAf,KAAKuC,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AACtC,QAAIO,QAAQ,MAAM3B,GAAGsB,KAAH,CAAST,QAAT,CAAkBhB,EAAlB,CAAlB;AACAuB,MAAEI,IAAF,yBAAO,gEAAUX,QAAV,wBAAmBY,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAkC,oCAAlC;AACAL,MAAEI,IAAF,yBAAO,gEAAUX,QAAV,wBAAmBe,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsC,gCAAtC;AACAR,MAAEI,IAAF,yBAAO,uEAAUX,QAAV,+BAAmBa,UAAnB,aAA8B7B,EAA9B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA0C,6CAA1C;;AAEAuB,MAAES,SAAF,CAAYF,KAAZ,EAAmBvC,cAAc0B,IAAd,CAAmBjB,EAAnB,CAAnB,EAA2C,oBAA3C;AACF,CAPD;;AASCb,KAAKuC,MAAL,CAAY,+BAAZ,EAA6C,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;;AACpD,QAAIO,QAAQ,MAAM3B,GAAGsB,KAAH,CAASQ,cAAT,CAAwBpC,MAAxB,CAAlB;AACA0B,MAAEI,IAAF,yBAAO,gEAAUT,OAAV,wBAAkBU,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,mCAAjC;AACAL,MAAEI,IAAF,2BAAO,kEAAUT,OAAV,wBAAkBgB,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAsC,gCAAtC;AACAX,MAAEI,IAAF,2BAAO,kEAAUjB,MAAV,wBAAiBkB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAgC,8BAAhC;AACAL,MAAEI,IAAF,2BAAO,kEAAUjB,MAAV,wBAAiBqB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,oCAApC;AACAR,MAAEI,IAAF,2BAAO,yEAAUjB,MAAV,+BAAiBmB,UAAjB,cAA4BhC,MAA5B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA4C,mDAA5C;;AAGA0B,MAAES,SAAF,CAAYF,KAAZ,EAAmBjC,MAAnB,EAA2B,0BAA3B;AACH,CAVD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n    loggin: function() {}\n}\n\nlet MetricStub = {\n belongsTo: sinon.spy()\n}\n\n// Get one instance \nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet uuid = 'yyyy-yyyy-yyyy'\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\nlet uuidArgs = {\n    where: { uuid }\n  }\n  \n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n  // Model update Stub\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n  // Model findById Stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  // Model findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n \n\n    const setupDatabse = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n    })\n    db = await setupDatabse(config)\n})\n\ntest.afterEach(() => {\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n\n\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'Agent.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agent.hasMany was executed with Matric')\n    t.true(MetricStub.belongsTo.called, 'Metric.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n})\n\ntest.serial('Agent#findById', async t => {\n   let agent = await db.Agent.findById(id) \n   t.true(AgentStub.findById.called, 'FindById should be called on model')\n   t.true(AgentStub.findById.calledOnce, 'FindById should be called once')\n   t.true(AgentStub.findById.calledWith(id), 'FindById should be called with specified id')\n\n   t.deepEqual(agent, agentFixtures.byId(id), 'Should be the same')\n})\n\n test.serial('Agent#createOrUpdate - exists', async t => {\n     let agent = await db.Agent.createOrUpdate(single)\n     t.true(AgentStub.findOne.called, 'FindOne should be called on model')\n     t.true(AgentStub.findOne.calledTwice, 'FindOne should be called twice')\n     t.true(AgentStub.update.called, 'agent.update called on model')\n     t.true(AgentStub.update.calledOnce, 'agent.update should be called once')\n     t.true(AgentStub.update.calledWith(single), 'agent.update should be called with specified args')\n   \n     \n     t.deepEqual(agent, single, 'Agent should be the same')\n })\n\n"]}