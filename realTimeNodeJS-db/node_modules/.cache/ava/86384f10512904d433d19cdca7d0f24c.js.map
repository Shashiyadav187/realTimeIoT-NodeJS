{"version":3,"sources":["metric-tests.js"],"names":["test","require","sinon","proxyquire","config","loggin","MetricStub","belongsTo","spy","AgentStub","hasMany","sandbox","beforeEach","create","setupDatabse","db","serial","t","true","called","calledWith"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA;AACA;;;AAGA,IAAIG,SAAS;AACTC,UAAQ,YAAY,CAAE;AADb,CAAb;;AAIE,IAAIC,aAAa;AACfC,aAAWL,MAAMM,GAAN;AADI,CAAjB;;AAIA,IAAIC,YAAY;AACdC,WAASR,MAAMM,GAAN;AADK,CAAhB;;AAIA,IAAIG,UAAU,IAAd;AACAX,KAAKY,UAAL,CAAgB,YAAY;AAC1BD,YAAUT,MAAMS,OAAN,CAAcE,MAAd,EAAV;AACAJ,cAAY;AACVC,aAASC,QAAQH,GAAR;AADC,GAAZ;AAGA,QAAMM,eAAeX,WAAW,KAAX,EAAkB;AACnC,sBAAkB,MAAMM,SADW;AAEnC,uBAAmB,MAAMH;AAFU,GAAlB,CAArB;AAIES,OAAK,MAAMD,aAAaV,MAAb,CAAX;AACD,CAVH;;AAaAJ,KAAKgB,MAAL,CAAY,OAAZ,EAAqBC,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEC,IAAF,uBAAO,8DAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,4BAAjC;AACAF,IAAEC,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6Bd,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,wCAAjD;AACAW,IAAEC,IAAF,yBAAO,iEAAWX,SAAX,wBAAqBY,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,+BAApC;AACAF,IAAEC,IAAF,yBAAO,wEAAWX,SAAX,+BAAqBa,UAArB,aAAgCX,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,kCAAnD;AACD,CALD","file":"metric-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\n//const agentFixtures = require('./fixtures/agent')\n//const metricFixtures = require('./fixtures/metric')\n\n\nlet config = {\n    loggin: function () {}\n  }\n  \n  let MetricStub = {\n    belongsTo: sinon.spy()\n  }\n\n  let AgentStub = {\n    hasMany: sinon.spy()\n  }\n\n  let sandbox = null\n  test.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n      hasMany: sandbox.spy()\n    }\n    const setupDatabse = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n      })\n      db = await setupDatabse(config)\n    })\n\n\n  test.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'Agent.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agent.hasMany was executed with Matric')\n    t.true(MetricStub.belongsTo.called, 'Metric.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n  })"]}