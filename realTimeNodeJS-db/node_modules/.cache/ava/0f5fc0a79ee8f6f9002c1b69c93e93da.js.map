{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","loggin","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabse","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACTC,YAAQ,YAAW,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AAChBC,eAAWN,MAAMO,GAAN;;AAGZ;AAJiB,CAAjB,CAKA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAhB,KAAKiB,UAAL,CAAgB,YAAY;AACxBD,cAAUd,MAAMc,OAAN,CAAcE,MAAd,EAAV;AACAJ,gBAAY;AACRK,iBAASH,QAAQP,GAAR;AADD,KAAZ;;AAIA,UAAMW,eAAejB,WAAW,KAAX,EAAkB;AACnC,0BAAkB,MAAMW,SADW;AAEnC,2BAAmB,MAAMP;AAFU,KAAlB,CAArB;AAIAQ,SAAK,MAAMK,aAAaf,MAAb,CAAX;AACH,CAXD;;AAaAL,KAAKqB,SAAL,CAAe,MAAM;AACjBL,eAAWd,MAAMc,OAAN,CAAcM,OAAd,EAAX;AACH,CAFD;;AAIAtB,KAAK,OAAL,EAAcuB,KAAK;AAAA;;AACfA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACH,CAFD;;AAKAzB,KAAK0B,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACtBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,4BAAjC;AACAL,MAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiD,wCAAjD;AACAgB,MAAEI,IAAF,yBAAO,iEAAWnB,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,+BAApC;AACAL,MAAEI,IAAF,yBAAO,wEAAWnB,SAAX,+BAAqBqB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmD,kCAAnD;AACH,CALD;;AAOAd,KAAK0B,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACtC,QAAIO,QAAQ,MAAMf,GAAGU,KAAH,CAASM,QAAT,CAAkBlB,EAAlB,CAAlB;AACAU,MAAES,SAAF,CAAYF,KAAZ,EAAmB1B,cAAc2B,QAAd,CAAuBlB,EAAvB,CAAnB,EAA+C,oBAA/C;AACF,CAHD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n    loggin: function() {}\n}\n\nlet MetricStub = {\n belongsTo: sinon.spy()\n}\n\n// Get one instance \nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n\n    const setupDatabse = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n    })\n    db = await setupDatabse(config)\n})\n\ntest.afterEach(() => {\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n\n\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'Agent.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agent.hasMany was executed with Matric')\n    t.true(MetricStub.belongsTo.called, 'Metric.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n})\n\ntest.serial('Agent#findById', async t => {\n   let agent = await db.Agent.findById(id) \n   t.deepEqual(agent, agentFixtures.findById(id), 'Should be the same')\n})"]}