{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","config","loggin","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabse","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,IAAIG,SAAS;AACTC,YAAQ,YAAW,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AAChBC,eAAWL,MAAMM,GAAN;AADK,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AACxBD,cAAUT,MAAMS,OAAN,CAAcE,MAAd,EAAV;AACAJ,gBAAY;AACRK,iBAASH,QAAQH,GAAR;AADD,KAAZ;;AAIA,UAAMO,eAAeZ,WAAW,KAAX,EAAkB;AACnC,0BAAkB,MAAMM,SADW;AAEnC,2BAAmB,MAAMH;AAFU,KAAlB,CAArB;AAIAI,SAAK,MAAMK,aAAaX,MAAb,CAAX;AACH,CAXD;;AAaAJ,KAAKgB,SAAL,CAAe,MAAM;AACjBL,eAAWT,MAAMS,OAAN,CAAcM,OAAd,EAAX;AACH,CAFD;;AAIAjB,KAAK,OAAL,EAAckB,KAAK;AAAA;;AACfA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACH,CAFD;;AAKApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;;AACtBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,4BAAjC;AACAL,MAAEI,IAAF,yBAAO,iEAAWR,OAAX,wBAAmBS,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAkC,+BAAlC;AACH,CAHD","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nlet config = {\n    loggin: function() {}\n}\n\nlet MetricStub = {\n belongsTo: sinon.spy()\n}\n\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n\n    const setupDatabse = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n    })\n    db = await setupDatabse(config)\n})\n\ntest.afterEach(() => {\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n\n\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'Agent.hasMany was executed')\n    t.true(MetricStub.hasMany.called, 'Metric.belongsTo was executed')\n})"]}