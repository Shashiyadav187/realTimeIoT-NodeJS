{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","loggin","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","connectedArgs","where","connected","usernameArgs","username","uuidArgs","newAgent","name","hostname","pid","beforeEach","create","hasMany","stub","withArgs","returns","Promise","resolve","toJSON","update","findById","byId","findOne","byUuid","findAll","all","userone","setupDatabse","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","findByUuid","agents","is","length","findConnected","findByUsername","platzi","createOrUpdate","calledTwice"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACTC,UAAQ,YAAW,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AAChBC,aAAWN,MAAMO,GAAN;;AAGZ;AAJiB,CAAjB,CAKA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,OAAO,gBAAX;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAGE,IAAIC,gBAAgB;AAClBC,SAAO,EAAEC,WAAW,IAAb;AADW,CAApB;;AAIA,IAAIC,eAAe;AACjBF,SAAO,EAAEC,WAAW,IAAb,EAAmBE,UAAU,SAA7B;AADU,CAAnB;;AAIA,IAAIC,WAAW;AACbJ,SAAO,EAAEL,IAAF;AADM,CAAf;;AAIA,IAAIU,WAAW;AACbV,QAAM,aADO;AAEbW,QAAM,MAFO;AAGbH,YAAU,MAHG;AAIbI,YAAU,MAJG;AAKbC,OAAK,CALQ;AAMbP,aAAW;AANE,CAAf;;AASFpB,KAAK4B,UAAL,CAAgB,YAAY;AACxBX,YAAUf,MAAMe,OAAN,CAAcY,MAAd,EAAV;AACAd,cAAY;AACRe,aAASb,QAAQR,GAAR;;AAGf;AAJc,GAAZ,CAKFM,UAAUc,MAAV,GAAmBZ,QAAQc,IAAR,EAAnB;AACAhB,YAAUc,MAAV,CAAiBG,QAAjB,CAA0BR,QAA1B,EAAoCS,OAApC,CAA4CC,QAAQC,OAAR,CAAgB;AAC1DC,aAAU;AAAE,aAAOZ,QAAP;AAAiB;AAD6B,GAAhB,CAA5C;;AAIA;AACAT,YAAUsB,MAAV,GAAmBpB,QAAQc,IAAR,EAAnB;AACAhB,YAAUsB,MAAV,CAAiBL,QAAjB,CAA0BtB,MAA1B,EAAkCa,QAAlC,EAA4CU,OAA5C,CAAoDC,QAAQC,OAAR,CAAgBzB,MAAhB,CAApD;;AAEA;AACAK,YAAUuB,QAAV,GAAqBrB,QAAQc,IAAR,EAArB;AACAhB,YAAUuB,QAAV,CAAmBN,QAAnB,CAA4BnB,EAA5B,EAAgCoB,OAAhC,CAAwCC,QAAQC,OAAR,CAAgB/B,cAAcmC,IAAd,CAAmB1B,EAAnB,CAAhB,CAAxC;;AAEA;AACAE,YAAUyB,OAAV,GAAoBvB,QAAQc,IAAR,EAApB;AACAhB,YAAUyB,OAAV,CAAkBR,QAAlB,CAA2BT,QAA3B,EAAqCU,OAArC,CAA6CC,QAAQC,OAAR,CAAgB/B,cAAcqC,MAAd,CAAqB3B,IAArB,CAAhB,CAA7C;;AAEE;AACAC,YAAU2B,OAAV,GAAoBzB,QAAQc,IAAR,EAApB;AACAhB,YAAU2B,OAAV,CAAkBV,QAAlB,GAA6BC,OAA7B,CAAqCC,QAAQC,OAAR,CAAgB/B,cAAcuC,GAA9B,CAArC;AACA5B,YAAU2B,OAAV,CAAkBV,QAAlB,CAA2Bd,aAA3B,EAA0Ce,OAA1C,CAAkDC,QAAQC,OAAR,CAAgB/B,cAAcgB,SAA9B,CAAlD;AACAL,YAAU2B,OAAV,CAAkBV,QAAlB,CAA2BX,YAA3B,EAAyCY,OAAzC,CAAiDC,QAAQC,OAAR,CAAgB/B,cAAcwC,OAA9B,CAAjD;;AAGA,QAAMC,eAAe1C,WAAW,KAAX,EAAkB;AACnC,sBAAkB,MAAMY,SADW;AAEnC,uBAAmB,MAAMR;AAFU,GAAlB,CAArB;AAIAS,OAAK,MAAM6B,aAAaxC,MAAb,CAAX;AACH,CApCD;;AAsCAL,KAAK8C,SAAL,CAAe,MAAM;AACjB7B,aAAWf,MAAMe,OAAN,CAAc8B,OAAd,EAAX;AACH,CAFD;;AAIA/C,KAAK,OAAL,EAAcgD,KAAK;AAAA;;AACfA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACH,CAFD;;AAKAlD,KAAKmD,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACtBA,IAAEI,IAAF,yBAAO,gEAAUtB,OAAV,wBAAkBuB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,4BAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUtB,OAAV,+BAAkBwB,UAAlB,aAA6B/C,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,wCAAjD;AACAyC,IAAEI,IAAF,yBAAO,iEAAW5C,SAAX,wBAAqB6C,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,+BAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAW5C,SAAX,+BAAqB8C,UAArB,aAAgCvC,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,kCAAnD;AACH,CALD;;AAOAf,KAAKmD,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AACtC,MAAIO,QAAQ,MAAMvC,GAAGkC,KAAH,CAASZ,QAAT,CAAkBzB,EAAlB,CAAlB;AACAmC,IAAEI,IAAF,yBAAO,gEAAUd,QAAV,wBAAmBe,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkC,oCAAlC;AACAL,IAAEI,IAAF,yBAAO,gEAAUd,QAAV,wBAAmBkB,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsC,gCAAtC;AACAR,IAAEI,IAAF,yBAAO,uEAAUd,QAAV,+BAAmBgB,UAAnB,aAA8BzC,EAA9B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA0C,6CAA1C;;AAEAmC,IAAES,SAAF,CAAYF,KAAZ,EAAmBnD,cAAcmC,IAAd,CAAmB1B,EAAnB,CAAnB,EAA2C,oBAA3C;AACF,CAPD;;AAWAb,KAAKmD,MAAL,CAAY,kBAAZ,EAAgC,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AACzC,MAAIO,QAAQ,MAAMvC,GAAGkC,KAAH,CAASQ,UAAT,CAAoB5C,IAApB,CAAlB;;AAEAkC,IAAEI,IAAF,yBAAO,gEAAUZ,OAAV,wBAAkBa,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUZ,OAAV,wBAAkBgB,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAR,IAAEI,IAAF,2BAAO,yEAAUZ,OAAV,+BAAkBc,UAAlB,cAA6B/B,QAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA+C,yCAA/C;;AAEAyB,IAAES,SAAF,CAAYF,KAAZ,EAAmBnD,cAAcqC,MAAd,CAAqB3B,IAArB,CAAnB,EAA+C,0BAA/C;AACD,CARD;;AAUAd,KAAKmD,MAAL,CAAY,eAAZ,EAA6B,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AACtC,MAAIW,SAAS,MAAM3C,GAAGkC,KAAH,CAASR,OAAT,EAAnB;;AAEAM,IAAEI,IAAF,2BAAO,kEAAUV,OAAV,wBAAkBW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUV,OAAV,wBAAkBc,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAR,IAAEI,IAAF,2BAAO,yEAAUV,OAAV,+BAAkBY,UAAlB,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuC,uCAAvC;;AAEAN,IAAEY,EAAF,CAAKD,OAAOE,MAAZ,EAAoBzD,cAAcuC,GAAd,CAAkBkB,MAAtC,EAA8C,kCAA9C;AACAb,IAAES,SAAF,CAAYE,MAAZ,EAAoBvD,cAAcuC,GAAlC,EAAuC,2BAAvC;AACD,CATD;;AAWA3C,KAAKmD,MAAL,CAAY,qBAAZ,EAAmC,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AAC5C,MAAIW,SAAS,MAAM3C,GAAGkC,KAAH,CAASY,aAAT,EAAnB;;AAEAd,IAAEI,IAAF,2BAAO,kEAAUV,OAAV,wBAAkBW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUV,OAAV,wBAAkBc,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAR,IAAEI,IAAF,2BAAO,yEAAUV,OAAV,+BAAkBY,UAAlB,cAA6BpC,aAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoD,8CAApD;;AAEA8B,IAAEY,EAAF,CAAKD,OAAOE,MAAZ,EAAoBzD,cAAcgB,SAAd,CAAwByC,MAA5C,EAAoD,kCAApD;AACAb,IAAES,SAAF,CAAYE,MAAZ,EAAoBvD,cAAcgB,SAAlC,EAA6C,2BAA7C;AACD,CATD;;AAWApB,KAAKmD,MAAL,CAAY,sBAAZ,EAAoC,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;;AAC7C,MAAIW,SAAS,MAAM3C,GAAGkC,KAAH,CAASa,cAAT,CAAwB,QAAxB,CAAnB;;AAEAf,IAAEI,IAAF,2BAAO,kEAAUV,OAAV,wBAAkBW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUV,OAAV,wBAAkBc,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAR,IAAEI,IAAF,2BAAO,yEAAUV,OAAV,+BAAkBY,UAAlB,cAA6BjC,YAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,6CAAnD;;AAEA2B,IAAEY,EAAF,CAAKD,OAAOE,MAAZ,EAAoBzD,cAAc4D,MAAd,CAAqBH,MAAzC,EAAiD,kCAAjD;AACAb,IAAES,SAAF,CAAYE,MAAZ,EAAoBvD,cAAc4D,MAAlC,EAA0C,2BAA1C;AACD,CATD;;AAWChE,KAAKmD,MAAL,CAAY,+BAAZ,EAA6C,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;;AACpD,MAAIO,QAAQ,MAAMvC,GAAGkC,KAAH,CAASe,cAAT,CAAwBvD,MAAxB,CAAlB;AACAsC,IAAEI,IAAF,2BAAO,kEAAUZ,OAAV,wBAAkBa,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUZ,OAAV,wBAAkB0B,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAsC,gCAAtC;AACAlB,IAAEI,IAAF,2BAAO,kEAAUf,MAAV,wBAAiBgB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,8BAAhC;AACAL,IAAEI,IAAF,2BAAO,kEAAUf,MAAV,wBAAiBmB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAR,IAAEI,IAAF,2BAAO,yEAAUf,MAAV,+BAAiBiB,UAAjB,cAA4B5C,MAA5B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA4C,mDAA5C;;AAGAsC,IAAES,SAAF,CAAYF,KAAZ,EAAmB7C,MAAnB,EAA2B,0BAA3B;AACH,CAVD;;AAYAV,KAAKmD,MAAL,CAAY,4BAAZ,EAA0C,MAAMH,CAAN,IAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAClD,MAAIO,QAAQ,MAAMvC,GAAGkC,KAAH,CAASe,cAAT,CAAwBzC,QAAxB,CAAlB;;AAEAwB,IAAEI,IAAF,2BAAO,kEAAUZ,OAAV,wBAAkBa,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,mCAAjC;AACAL,IAAEI,IAAF,2BAAO,kEAAUZ,OAAV,wBAAkBgB,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAqC,+BAArC;AACAR,IAAEI,IAAF,2BAAO,yEAAUZ,OAAV,+BAAkBc,UAAlB,cAA6B;AAClCnC,wBAAO,EAAEL,mBAAM,+FAASA,IAAf,kEAAF,EAAP;AADkC,GAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAEI,yCAFJ;AAGAkC,IAAEI,IAAF,2BAAO,kEAAUvB,MAAV,wBAAiBwB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,kCAAhC;AACAL,IAAEI,IAAF,2BAAO,kEAAUvB,MAAV,wBAAiB2B,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,8BAApC;AACAR,IAAEI,IAAF,2BAAO,yEAAUvB,MAAV,+BAAiByB,UAAjB,cAA4B9B,QAA5B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA8C,6CAA9C;;AAEAwB,IAAES,SAAF,CAAYF,KAAZ,EAAmB/B,QAAnB,EAA6B,0BAA7B;AACD,CAbF","file":"agent-tests.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n    loggin: function() {}\n}\n\nlet MetricStub = {\n belongsTo: sinon.spy()\n}\n\n// Get one instance \nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet uuid = 'yyyy-yyyy-yyyy'\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\n  \n  let connectedArgs = {\n    where: { connected: true }\n  }\n  \n  let usernameArgs = {\n    where: { connected: true, username: 'userone' }\n  }\n  \n  let uuidArgs = {\n    where: { uuid }\n  }\n  \n  let newAgent = {\n    uuid: '123-123-123',\n    name: 'test',\n    username: 'test',\n    hostname: 'test',\n    pid: 0,\n    connected: false\n  }\n\ntest.beforeEach(async () => {\n    sandbox = sinon.sandbox.create()\n    AgentStub = {\n        hasMany: sandbox.spy()\n    }\n\n  // Model create Stub\n  AgentStub.create = sandbox.stub()\n  AgentStub.create.withArgs(newAgent).returns(Promise.resolve({\n    toJSON () { return newAgent }\n  }))\n\n  // Model update Stub\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n  // Model findById Stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  // Model findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n    // Model findAll Stub\n    AgentStub.findAll = sandbox.stub()\n    AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\n    AgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\n    AgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.userone))\n \n\n    const setupDatabse = proxyquire('../', {\n        './models/agent': () => AgentStub,\n        './models/metric': () => MetricStub\n    })\n    db = await setupDatabse(config)\n})\n\ntest.afterEach(() => {\n    sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n    t.truthy(db.Agent, 'Agent service should exist')\n})\n\n\ntest.serial('Setup', t => {\n    t.true(AgentStub.hasMany.called, 'Agent.hasMany was executed')\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agent.hasMany was executed with Matric')\n    t.true(MetricStub.belongsTo.called, 'Metric.belongsTo was executed')\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentStub')\n})\n\ntest.serial('Agent#findById', async t => {\n   let agent = await db.Agent.findById(id) \n   t.true(AgentStub.findById.called, 'FindById should be called on model')\n   t.true(AgentStub.findById.calledOnce, 'FindById should be called once')\n   t.true(AgentStub.findById.calledWith(id), 'FindById should be called with specified id')\n\n   t.deepEqual(agent, agentFixtures.byId(id), 'Should be the same')\n})\n\n\n\ntest.serial('Agent#findByUuid', async t => {\n  let agent = await db.Agent.findByUuid(uuid)\n\n  t.true(AgentStub.findOne.called, 'findOne should be called on model')\n  t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')\n\n  t.deepEqual(agent, agentFixtures.byUuid(uuid), 'agent should be the same')\n})\n\ntest.serial('Agent#findAll', async t => {\n  let agents = await db.Agent.findAll()\n\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(AgentStub.findAll.calledWith(), 'findAll should be called without args')\n\n  t.is(agents.length, agentFixtures.all.length, 'agents should be the same amount')\n  t.deepEqual(agents, agentFixtures.all, 'agents should be the same')\n})\n\ntest.serial('Agent#findConnected', async t => {\n  let agents = await db.Agent.findConnected()\n\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(AgentStub.findAll.calledWith(connectedArgs), 'findAll should be called with connected args')\n\n  t.is(agents.length, agentFixtures.connected.length, 'agents should be the same amount')\n  t.deepEqual(agents, agentFixtures.connected, 'agents should be the same')\n})\n\ntest.serial('Agent#findByUsername', async t => {\n  let agents = await db.Agent.findByUsername('platzi')\n\n  t.true(AgentStub.findAll.called, 'findAll should be called on model')\n  t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\n  t.true(AgentStub.findAll.calledWith(usernameArgs), 'findAll should be called with username args')\n\n  t.is(agents.length, agentFixtures.platzi.length, 'agents should be the same amount')\n  t.deepEqual(agents, agentFixtures.platzi, 'agents should be the same')\n})\n\n test.serial('Agent#createOrUpdate - exists', async t => {\n     let agent = await db.Agent.createOrUpdate(single)\n     t.true(AgentStub.findOne.called, 'FindOne should be called on model')\n     t.true(AgentStub.findOne.calledTwice, 'FindOne should be called twice')\n     t.true(AgentStub.update.called, 'agent.update called on model')\n     t.true(AgentStub.update.calledOnce, 'agent.update should be called once')\n     t.true(AgentStub.update.calledWith(single), 'agent.update should be called with specified args')\n   \n     \n     t.deepEqual(agent, single, 'Agent should be the same')\n })\n\n test.serial('Agent#createOrUpdate - new', async t => {\n    let agent = await db.Agent.createOrUpdate(newAgent)\n  \n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\n    t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\n    t.true(AgentStub.findOne.calledWith({\n      where: { uuid: newAgent.uuid }\n    }), 'findOne should be called with uuid args')\n    t.true(AgentStub.create.called, 'create should be called on model')\n    t.true(AgentStub.create.calledOnce, 'create should be called once')\n    t.true(AgentStub.create.calledWith(newAgent), 'create should be called with specified args')\n  \n    t.deepEqual(agent, newAgent, 'agent should be the same')\n  })\n\n"]}