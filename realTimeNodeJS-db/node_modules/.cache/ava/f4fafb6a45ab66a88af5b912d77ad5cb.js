'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const test = require('ava');
const sinon = require('sinon');
const proxyquire = require('proxyquire');

//const agentFixtures = require('./fixtures/agent')
const metricFixtures = require('./fixtures/metric');

let config = {
  loggin: function () {}
};

let MetricStub = {
  belongsTo: sinon.spy()
};

let AgentStub = {
  hasMany: sinon.spy()
};

let sandbox = null;
let db = null;
let agentId = 1;
let type = 'START';
test.beforeEach(async () => {
  sandbox = sinon.sandbox.create();
  AgentStub = {
    hasMany: sandbox.spy()
  };
  const setupDatabse = proxyquire('../', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabse(config);
});

test.serial('Setup', t => {
  var _rec = new _powerAssertRecorder(),
      _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder(),
      _rec4 = new _powerAssertRecorder();

  t.true(_rec._expr(_rec._capt(_rec._capt(_rec._capt(AgentStub, 'arguments/0/object/object').hasMany, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(AgentStub.hasMany.called, \'Agent.hasMany was executed\')',
    filepath: 'tests/metric-tests.js',
    line: 41,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"hasMany","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"called","range":[25,31]},"computed":false,"range":[7,31]},{"type":"StringLiteral","value":"Agent.hasMany was executed","range":[33,61]}],"range":[0,62]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"hasMany","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"called","range":[25,31]},{"type":{"label":","},"range":[31,32]},{"type":{"label":"string"},"value":"Agent.hasMany was executed","range":[33,61]},{"type":{"label":")"},"range":[61,62]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Agent.hasMany was executed');
  t.true(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(AgentStub, 'arguments/0/callee/object/object').hasMany, 'arguments/0/callee/object').calledWith(_rec2._capt(MetricStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(AgentStub.hasMany.calledWith(MetricStub), \'Agent.hasMany was executed with Matric\')',
    filepath: 'tests/metric-tests.js',
    line: 42,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"AgentStub","range":[7,16]},"property":{"type":"Identifier","name":"hasMany","range":[17,24]},"computed":false,"range":[7,24]},"property":{"type":"Identifier","name":"calledWith","range":[25,35]},"computed":false,"range":[7,35]},"arguments":[{"type":"Identifier","name":"MetricStub","range":[36,46]}],"range":[7,47]},{"type":"StringLiteral","value":"Agent.hasMany was executed with Matric","range":[49,89]}],"range":[0,90]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"AgentStub","range":[7,16]},{"type":{"label":"."},"range":[16,17]},{"type":{"label":"name"},"value":"hasMany","range":[17,24]},{"type":{"label":"."},"range":[24,25]},{"type":{"label":"name"},"value":"calledWith","range":[25,35]},{"type":{"label":"("},"range":[35,36]},{"type":{"label":"name"},"value":"MetricStub","range":[36,46]},{"type":{"label":")"},"range":[46,47]},{"type":{"label":","},"range":[47,48]},{"type":{"label":"string"},"value":"Agent.hasMany was executed with Matric","range":[49,89]},{"type":{"label":")"},"range":[89,90]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Agent.hasMany was executed with Matric');
  t.true(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(MetricStub, 'arguments/0/object/object').belongsTo, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(MetricStub.belongsTo.called, \'Metric.belongsTo was executed\')',
    filepath: 'tests/metric-tests.js',
    line: 43,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"belongsTo","range":[18,27]},"computed":false,"range":[7,27]},"property":{"type":"Identifier","name":"called","range":[28,34]},"computed":false,"range":[7,34]},{"type":"StringLiteral","value":"Metric.belongsTo was executed","range":[36,67]}],"range":[0,68]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"belongsTo","range":[18,27]},{"type":{"label":"."},"range":[27,28]},{"type":{"label":"name"},"value":"called","range":[28,34]},{"type":{"label":","},"range":[34,35]},{"type":{"label":"string"},"value":"Metric.belongsTo was executed","range":[36,67]},{"type":{"label":")"},"range":[67,68]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Metric.belongsTo was executed');
  t.true(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(MetricStub, 'arguments/0/callee/object/object').belongsTo, 'arguments/0/callee/object').calledWith(_rec4._capt(AgentStub, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.true(MetricStub.belongsTo.calledWith(AgentStub), \'Argument should be the AgentStub\')',
    filepath: 'tests/metric-tests.js',
    line: 44,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"belongsTo","range":[18,27]},"computed":false,"range":[7,27]},"property":{"type":"Identifier","name":"calledWith","range":[28,38]},"computed":false,"range":[7,38]},"arguments":[{"type":"Identifier","name":"AgentStub","range":[39,48]}],"range":[7,49]},{"type":"StringLiteral","value":"Argument should be the AgentStub","range":[51,85]}],"range":[0,86]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"belongsTo","range":[18,27]},{"type":{"label":"."},"range":[27,28]},{"type":{"label":"name"},"value":"calledWith","range":[28,38]},{"type":{"label":"("},"range":[38,39]},{"type":{"label":"name"},"value":"AgentStub","range":[39,48]},{"type":{"label":")"},"range":[48,49]},{"type":{"label":","},"range":[49,50]},{"type":{"label":"string"},"value":"Argument should be the AgentStub","range":[51,85]},{"type":{"label":")"},"range":[85,86]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Argument should be the AgentStub');
});

test.serial('Metric#findByAgentId', async t => {
  var _rec5 = new _powerAssertRecorder();

  let metric = await db.Metric.findByTypeAgentUuid(type, agentId);
  t.true(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(MetricStub, 'arguments/0/object/object').findByTypeAgentUuid, 'arguments/0/object').called, 'arguments/0'), {
    content: 't.true(MetricStub.findByTypeAgentUuid.called, \'findByTypeAgentUuid should be called on model\')',
    filepath: 'tests/metric-tests.js',
    line: 50,
    async: true,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"MetricStub","range":[7,17]},"property":{"type":"Identifier","name":"findByTypeAgentUuid","range":[18,37]},"computed":false,"range":[7,37]},"property":{"type":"Identifier","name":"called","range":[38,44]},"computed":false,"range":[7,44]},{"type":"StringLiteral","value":"findByTypeAgentUuid should be called on model","range":[46,93]}],"range":[0,94]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"MetricStub","range":[7,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"findByTypeAgentUuid","range":[18,37]},{"type":{"label":"."},"range":[37,38]},{"type":{"label":"name"},"value":"called","range":[38,44]},{"type":{"label":","},"range":[44,45]},{"type":{"label":"string"},"value":"findByTypeAgentUuid should be called on model","range":[46,93]},{"type":{"label":")"},"range":[93,94]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'findByTypeAgentUuid should be called on model');
  //  t.true(AgentStub.findById.calledOnce, 'FindById should be called once')
  //  t.true(AgentStub.findById.calledWith(id), 'FindById should be called with specified id')

  t.deepEqual(metric, metricFixtures.byTypeAnAgentId(type, agentId), 'Should be the same');
});
//# sourceMappingURL=/home/m/Desktop/platzi/courses/node/avance/realTimeNodeJS/realTimeNodeJS-db/node_modules/.cache/ava/f4fafb6a45ab66a88af5b912d77ad5cb.js.map